/**\n * Test file to verify PHP currency formatting works correctly\n * Run this in browser console or as a Node.js test\n */\n\n// Test data\nconst testCases = [\n  { amount: 1000, budgetType: 'fixed' },\n  { amount: 25000, budgetType: 'hourly' },\n  { amount: 150000, budgetType: 'monthly' },\n  { amount: 1250000, budgetType: 'project' },\n  { amount: 50.75, budgetType: 'daily' },\n  { amount: 0, budgetType: 'weekly' }\n];\n\n// Frontend tests (for browser console)\nif (typeof window !== 'undefined') {\n  console.log('=== FRONTEND PHP CURRENCY TESTS ===');\n  \n  // Import the utility functions (adjust path as needed)\n  // import { formatPHPCurrency, formatBudgetWithType, formatCompactPHPCurrency } from './utils/currency';\n  \n  const formatPHPCurrency = (amount, options = {}) => {\n    const { minimumFractionDigits = 2, maximumFractionDigits = 2, showSymbol = true } = options;\n    if (showSymbol) {\n      return new Intl.NumberFormat('en-PH', {\n        style: 'currency',\n        currency: 'PHP',\n        minimumFractionDigits,\n        maximumFractionDigits\n      }).format(amount);\n    }\n    return new Intl.NumberFormat('en-PH', { minimumFractionDigits, maximumFractionDigits }).format(amount);\n  };\n  \n  const BUDGET_TYPES = {\n    fixed: 'Fixed Price',\n    hourly: 'Per Hour',\n    daily: 'Per Day',\n    weekly: 'Per Week',\n    monthly: 'Per Month',\n    project: 'Per Project'\n  };\n  \n  const formatBudgetWithType = (amount, budgetType) => {\n    const formattedAmount = formatPHPCurrency(amount);\n    const typeLabel = BUDGET_TYPES[budgetType] || budgetType;\n    return `${formattedAmount} (${typeLabel})`;\n  };\n  \n  const formatCompactPHPCurrency = (amount) => {\n    if (amount >= 1000000) {\n      return `₱${(amount / 1000000).toFixed(1)}M`;\n    } else if (amount >= 1000) {\n      return `₱${(amount / 1000).toFixed(1)}K`;\n    }\n    return formatPHPCurrency(amount);\n  };\n  \n  testCases.forEach((testCase, index) => {\n    console.log(`\\nTest Case ${index + 1}:`);\n    console.log(`Input: ${testCase.amount} (${testCase.budgetType})`);\n    console.log(`Basic Format: ${formatPHPCurrency(testCase.amount)}`);\n    console.log(`With Type: ${formatBudgetWithType(testCase.amount, testCase.budgetType)}`);\n    console.log(`Compact: ${formatCompactPHPCurrency(testCase.amount)}`);\n  });\n  \n  console.log('\\n=== Expected Results ===');\n  console.log('₱1,000.00 (Fixed Price)');\n  console.log('₱25,000.00 (Per Hour)');\n  console.log('₱150,000.00 (Per Month) / ₱150.0K');\n  console.log('₱1,250,000.00 (Per Project) / ₱1.3M');\n}\n\n// Backend tests (for Node.js)\nif (typeof module !== 'undefined' && module.exports) {\n  console.log('=== BACKEND PHP CURRENCY TESTS ===');\n  \n  const {\n    formatPHPCurrency,\n    formatBudgetResponse,\n    formatCompactPHPCurrency,\n    normalizeAmount,\n    parsePHPCurrency\n  } = require('../Backend/app/utils/currency');\n  \n  testCases.forEach((testCase, index) => {\n    console.log(`\\nTest Case ${index + 1}:`);\n    console.log(`Input: ${testCase.amount} (${testCase.budgetType})`);\n    \n    const basicFormat = formatPHPCurrency(testCase.amount);\n    console.log(`Basic Format: ${basicFormat}`);\n    \n    const budgetResponse = formatBudgetResponse(testCase.amount, testCase.budgetType);\n    console.log(`Budget Response:`, JSON.stringify(budgetResponse, null, 2));\n    \n    const compactFormat = formatCompactPHPCurrency(testCase.amount);\n    console.log(`Compact: ${compactFormat}`);\n    \n    // Test parsing the formatted currency back to number\n    const parsed = parsePHPCurrency(basicFormat);\n    console.log(`Parsed back: ${parsed} (should equal ${testCase.amount})`);\n    \n    if (Math.abs(parsed - testCase.amount) < 0.01) {\n      console.log('✅ Parse test PASSED');\n    } else {\n      console.log('❌ Parse test FAILED');\n    }\n  });\n  \n  // Test normalize function\n  console.log('\\n=== NORMALIZE TESTS ===');\n  const normalizeTests = [\n    '₱1,234.56',\n    '$1,234.56',\n    '1234.56',\n    1234.56,\n    '1,234',\n    null,\n    undefined,\n    'invalid'\n  ];\n  \n  normalizeTests.forEach(test => {\n    const result = normalizeAmount(test);\n    console.log(`normalize(${JSON.stringify(test)}) = ${result}`);\n  });\n}\n\n// Manual verification for table display\nconsole.log('\\n=== TABLE DISPLAY VERIFICATION ===');\nconsole.log('These should appear correctly in the admin table:');\nconsole.log('Job 1: Web Development - ₱15,000.00 (Fixed Price)');\nconsole.log('Job 2: Logo Design - ₱2,500.00 (Per Hour)');\nconsole.log('Job 3: Mobile App - ₱250,000.00 (Per Project) [Compact: ₱250.0K]');\nconsole.log('Job 4: Content Writing - ₱500.00 (Per Hour)');\n\n// Expected format in API response\nconsole.log('\\n=== API RESPONSE FORMAT ===');\nconst mockApiResponse = {\n  jobId: {\n    title: \"Sample Job\",\n    budget: 15000,\n    budgetType: \"fixed\",\n    formattedBudget: \"₱15,000.00\",\n    budgetInfo: {\n      amount: 15000,\n      formattedAmount: \"₱15,000.00\",\n      budgetType: \"fixed\",\n      budgetTypeLabel: \"Fixed Price\",\n      compactAmount: \"₱15.0K\"\n    }\n  }\n};\n\nconsole.log('Mock API Response:', JSON.stringify(mockApiResponse, null, 2));\n\nmodule.exports = { testCases };