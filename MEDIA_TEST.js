/**\n * Test file for media handling in reported posts\n * This file contains sample data and test cases for the enhanced media features\n */\n\n// Sample job data with media files\nconst sampleJobWithMedia = {\n  _id: \"60d5f484e56a8c0015e8b234\",\n  title: \"Website Design Project\",\n  description: \"Need a modern website design for my business\",\n  category: \"Web Development\",\n  budget: 50000,\n  budgetType: \"fixed\",\n  paymentMethod: \"wallet\",\n  location: {\n    address: \"123 Ayala Ave\",\n    city: \"Makati\",\n    region: \"Metro Manila\",\n    country: \"Philippines\"\n  },\n  media: [\n    {\n      type: \"https://example.com/uploads/design-mockup.jpg\",\n      mediaType: \"image\",\n      originalName: \"design-mockup.jpg\",\n      fileSize: 2048576, // 2MB\n      uploadedAt: \"2024-01-15T10:30:00.000Z\"\n    },\n    {\n      type: \"https://example.com/uploads/reference-video.mp4\",\n      mediaType: \"video\",\n      originalName: \"reference-video.mp4\",\n      fileSize: 15728640, // 15MB\n      uploadedAt: \"2024-01-15T10:32:00.000Z\"\n    },\n    \"https://example.com/uploads/logo-concept.png\", // String format (legacy)\n    \"https://example.com/uploads/demo-video.webm\"   // String format (legacy)\n  ],\n  icon: \"design\",\n  createdAt: \"2024-01-15T10:00:00.000Z\",\n  status: \"open\",\n  user: {\n    _id: \"60d5f484e56a8c0015e8b123\",\n    name: \"John Doe\",\n    email: \"john@example.com\",\n    phone: \"+639171234567\"\n  }\n};\n\n// Sample reported post with preserved media\nconst sampleReportedPost = {\n  _id: \"60d5f484e56a8c0015e8b456\",\n  jobId: \"60d5f484e56a8c0015e8b234\",\n  jobSnapshot: {\n    title: \"Website Design Project\",\n    description: \"Need a modern website design for my business\",\n    category: \"Web Development\",\n    budget: 50000,\n    budgetType: \"fixed\",\n    paymentMethod: \"wallet\",\n    location: {\n      address: \"123 Ayala Ave\",\n      city: \"Makati\",\n      region: \"Metro Manila\",\n      country: \"Philippines\"\n    },\n    media: [\n      {\n        type: \"https://example.com/uploads/design-mockup.jpg\",\n        mediaType: \"image\",\n        originalName: \"design-mockup.jpg\",\n        fileSize: 2048576,\n        uploadedAt: \"2024-01-15T10:30:00.000Z\"\n      },\n      {\n        type: \"https://example.com/uploads/reference-video.mp4\",\n        mediaType: \"video\",\n        originalName: \"reference-video.mp4\",\n        fileSize: 15728640,\n        uploadedAt: \"2024-01-15T10:32:00.000Z\"\n      }\n    ],\n    icon: \"design\",\n    date: \"2024-01-20T00:00:00.000Z\",\n    isUrgent: false,\n    serviceTier: \"standard\",\n    status: \"open\",\n    createdAt: \"2024-01-15T10:00:00.000Z\",\n    jobPosterInfo: {\n      name: \"John Doe\",\n      email: \"john@example.com\",\n      phone: \"+639171234567\"\n    }\n  },\n  reportedBy: {\n    _id: \"60d5f484e56a8c0015e8b789\",\n    name: \"Jane Reporter\",\n    email: \"jane@example.com\"\n  },\n  reason: \"inappropriate_content\",\n  comment: \"This job posting contains inappropriate images that violate community guidelines.\",\n  status: \"pending\",\n  createdAt: \"2024-01-16T14:30:00.000Z\",\n  updatedAt: \"2024-01-16T14:30:00.000Z\"\n};\n\n// Test cases for media handling\nconst mediaTestCases = [\n  {\n    name: \"Image and Video Mixed Media\",\n    media: [\n      {\n        type: \"https://example.com/image1.jpg\",\n        mediaType: \"image\",\n        originalName: \"screenshot.jpg\",\n        fileSize: 1024000\n      },\n      {\n        type: \"https://example.com/video1.mp4\",\n        mediaType: \"video\",\n        originalName: \"demo.mp4\",\n        fileSize: 5120000\n      }\n    ],\n    expectedImages: 1,\n    expectedVideos: 1\n  },\n  {\n    name: \"Legacy String Format Media\",\n    media: [\n      \"https://example.com/photo.png\",\n      \"https://example.com/clip.webm\",\n      \"https://example.com/design.gif\"\n    ],\n    expectedImages: 2, // png, gif\n    expectedVideos: 1  // webm\n  },\n  {\n    name: \"No Media\",\n    media: [],\n    expectedImages: 0,\n    expectedVideos: 0\n  },\n  {\n    name: \"Large Media Collection\",\n    media: Array.from({ length: 8 }, (_, i) => ({\n      type: `https://example.com/file${i + 1}.${i % 2 === 0 ? 'jpg' : 'mp4'}`,\n      mediaType: i % 2 === 0 ? 'image' : 'video',\n      originalName: `file${i + 1}.${i % 2 === 0 ? 'jpg' : 'mp4'}`,\n      fileSize: 1024000 + i * 512000\n    })),\n    expectedImages: 4,\n    expectedVideos: 4\n  }\n];\n\n// Helper functions for testing\nconst isVideoFile = (filename) => {\n  if (!filename) return false;\n  const videoExtensions = ['.mp4', '.avi', '.mov', '.wmv', '.flv', '.webm', '.mkv', '.m4v'];\n  const extension = filename.toLowerCase().substr(filename.lastIndexOf('.'));\n  return videoExtensions.includes(extension);\n};\n\nconst classifyMedia = (mediaArray) => {\n  const result = { images: 0, videos: 0, total: 0 };\n  \n  mediaArray.forEach(mediaItem => {\n    const mediaType = typeof mediaItem === 'string'\n      ? (isVideoFile(mediaItem) ? 'video' : 'image')\n      : mediaItem.mediaType || 'image';\n    \n    if (mediaType === 'video') {\n      result.videos++;\n    } else {\n      result.images++;\n    }\n    result.total++;\n  });\n  \n  return result;\n};\n\n// Run tests\nconst runMediaTests = () => {\n  console.log('=== MEDIA HANDLING TESTS ===\\n');\n  \n  mediaTestCases.forEach((testCase, index) => {\n    console.log(`Test ${index + 1}: ${testCase.name}`);\n    console.log(`Input: ${testCase.media.length} media items`);\n    \n    const classification = classifyMedia(testCase.media);\n    \n    console.log(`Result: ${classification.images} images, ${classification.videos} videos`);\n    console.log(`Expected: ${testCase.expectedImages} images, ${testCase.expectedVideos} videos`);\n    \n    const imagePass = classification.images === testCase.expectedImages;\n    const videoPass = classification.videos === testCase.expectedVideos;\n    \n    if (imagePass && videoPass) {\n      console.log('✅ PASSED\\n');\n    } else {\n      console.log('❌ FAILED');\n      if (!imagePass) console.log(`  - Image count mismatch: got ${classification.images}, expected ${testCase.expectedImages}`);\n      if (!videoPass) console.log(`  - Video count mismatch: got ${classification.videos}, expected ${testCase.expectedVideos}`);\n      console.log('');\n    }\n  });\n};\n\n// Test job snapshot creation\nconst testJobSnapshotCreation = (job) => {\n  console.log('=== JOB SNAPSHOT CREATION TEST ===\\n');\n  \n  const jobSnapshot = {\n    title: job.title,\n    description: job.description,\n    category: job.category,\n    budget: job.budget,\n    budgetType: job.budgetType,\n    paymentMethod: job.paymentMethod,\n    location: job.location,\n    media: job.media ? job.media.map(mediaItem => {\n      if (typeof mediaItem === 'string') {\n        const mediaType = isVideoFile(mediaItem) ? 'video' : 'image';\n        return {\n          type: mediaItem,\n          mediaType,\n          originalName: mediaItem.split('/').pop() || 'unknown',\n          uploadedAt: job.createdAt\n        };\n      } else {\n        return {\n          type: mediaItem.type || mediaItem.url || mediaItem,\n          mediaType: mediaItem.mediaType || (isVideoFile(mediaItem.type || mediaItem.url) ? 'video' : 'image'),\n          originalName: mediaItem.originalName || mediaItem.name || 'unknown',\n          fileSize: mediaItem.fileSize,\n          uploadedAt: mediaItem.uploadedAt || job.createdAt\n        };\n      }\n    }) : [],\n    icon: job.icon,\n    createdAt: job.createdAt,\n    jobPosterInfo: {\n      name: job.user.name,\n      email: job.user.email,\n      phone: job.user.phone\n    }\n  };\n  \n  console.log('Original job media count:', job.media?.length || 0);\n  console.log('Snapshot media count:', jobSnapshot.media.length);\n  console.log('Snapshot preserved poster info:', jobSnapshot.jobPosterInfo.name);\n  \n  const mediaClassification = classifyMedia(jobSnapshot.media);\n  console.log(`Media breakdown: ${mediaClassification.images} images, ${mediaClassification.videos} videos`);\n  \n  console.log('✅ Job snapshot created successfully\\n');\n  \n  return jobSnapshot;\n};\n\n// Frontend media rendering test\nconst testMediaRendering = (mediaArray) => {\n  console.log('=== FRONTEND MEDIA RENDERING TEST ===\\n');\n  \n  mediaArray.forEach((mediaItem, index) => {\n    const mediaUrl = typeof mediaItem === 'string' ? mediaItem : mediaItem.type;\n    const mediaType = typeof mediaItem === 'string'\n      ? (mediaUrl.match(/\\.(mp4|webm|mov|avi)$/i) ? 'video' : 'image')\n      : mediaItem.mediaType || 'image';\n    const fileName = typeof mediaItem === 'string'\n      ? mediaUrl.split('/').pop() || 'Unknown file'\n      : mediaItem.originalName || 'Unknown file';\n    \n    console.log(`Media ${index + 1}:`);\n    console.log(`  URL: ${mediaUrl}`);\n    console.log(`  Type: ${mediaType}`);\n    console.log(`  File: ${fileName}`);\n    \n    if (mediaItem.fileSize) {\n      const sizeMB = (mediaItem.fileSize / 1024 / 1024).toFixed(2);\n      console.log(`  Size: ${sizeMB} MB`);\n    }\n    \n    console.log(`  Render: ${mediaType === 'image' ? '<img>' : '<video>'} element`);\n    console.log('');\n  });\n  \n  console.log('✅ Media rendering simulation complete\\n');\n};\n\n// Run all tests\nif (typeof module !== 'undefined' && module.exports) {\n  // Node.js environment\n  runMediaTests();\n  testJobSnapshotCreation(sampleJobWithMedia);\n  testMediaRendering(sampleReportedPost.jobSnapshot.media);\n  \n  module.exports = {\n    sampleJobWithMedia,\n    sampleReportedPost,\n    mediaTestCases,\n    isVideoFile,\n    classifyMedia,\n    runMediaTests,\n    testJobSnapshotCreation,\n    testMediaRendering\n  };\n} else {\n  // Browser environment\n  console.log('Media handling tests loaded. Run runMediaTests() to execute.');\n}\n\n// API response format examples\nconst sampleApiResponse = {\n  success: true,\n  reportedPosts: [\n    {\n      _id: \"60d5f484e56a8c0015e8b456\",\n      jobId: {\n        _id: \"60d5f484e56a8c0015e8b234\",\n        title: \"Website Design Project\",\n        description: \"Need a modern website design for my business\",\n        category: \"Web Development\",\n        budget: 50000,\n        budgetType: \"fixed\",\n        media: [\n          {\n            type: \"https://example.com/uploads/design-mockup.jpg\",\n            mediaType: \"image\",\n            originalName: \"design-mockup.jpg\",\n            fileSize: 2048576\n          }\n        ],\n        formattedBudget: \"₱50,000.00\",\n        budgetInfo: {\n          amount: 50000,\n          formattedAmount: \"₱50,000.00\",\n          budgetType: \"fixed\",\n          budgetTypeLabel: \"Fixed Price\",\n          compactAmount: \"₱50.0K\"\n        },\n        hasMedia: true,\n        mediaCount: 1,\n        isDeleted: false\n      },\n      reportedBy: {\n        _id: \"60d5f484e56a8c0015e8b789\",\n        providerId: \"60d5f484e56a8c0015e8b789\",\n        providerName: \"Jane Reporter\",\n        providerEmail: \"jane@example.com\"\n      },\n      reason: \"inappropriate_content\",\n      comment: \"This job posting contains inappropriate images.\",\n      status: \"pending\",\n      createdAt: \"2024-01-16T14:30:00.000Z\"\n    }\n  ],\n  pagination: {\n    currentPage: 1,\n    totalPages: 1,\n    totalCount: 1,\n    hasNext: false,\n    hasPrev: false\n  },\n  summary: {\n    total: 1,\n    pending: 1,\n    reviewed: 0,\n    resolved: 0,\n    dismissed: 0\n  }\n};\n\nconsole.log('\\n=== SAMPLE API RESPONSE ===');\nconsole.log(JSON.stringify(sampleApiResponse, null, 2));